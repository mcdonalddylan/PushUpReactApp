[{"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\index.tsx":"1","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\reportWebVitals.ts":"2","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\App.tsx":"3","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\MainComp.tsx":"4","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\HeaderComp.tsx":"5","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\TimerModal.tsx":"6","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\NotificationComp.tsx":"7","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\views\\LoginPage.tsx":"8","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\views\\NoLoginPage.tsx":"9","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\LoginComp.tsx":"10","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\views\\ViewRecordsPage.tsx":"11","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\ThemeToggleButton.tsx":"12","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\RegisterComp.tsx":"13","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\util\\axiosConfig.ts":"14","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\views\\LoggedPage.tsx":"15","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\reducers\\userReducer.ts":"16","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\reducers\\notifReducer.ts":"17","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\actions\\userActions.ts":"18","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\actions\\notifActions.ts":"19","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\util\\sessionStorage.ts":"20","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\PushUpSpinner.tsx":"21","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\views\\UserSettingsPage.tsx":"22"},{"size":1512,"mtime":1611118867225,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":1292,"mtime":1611609312918,"results":"26","hashOfConfig":"24"},{"size":5988,"mtime":1611609782564,"results":"27","hashOfConfig":"24"},{"size":3630,"mtime":1611610425357,"results":"28","hashOfConfig":"24"},{"size":8043,"mtime":1608589606535,"results":"29","hashOfConfig":"24"},{"size":1348,"mtime":1611593094169,"results":"30","hashOfConfig":"24"},{"size":1861,"mtime":1611117799373,"results":"31","hashOfConfig":"24"},{"size":245,"mtime":1611609284935,"results":"32","hashOfConfig":"24"},{"size":8821,"mtime":1611695568221,"results":"33","hashOfConfig":"24"},{"size":3030,"mtime":1611594294410,"results":"34","hashOfConfig":"24"},{"size":463,"mtime":1608171649276,"results":"35","hashOfConfig":"24"},{"size":7250,"mtime":1611593271677,"results":"36","hashOfConfig":"24"},{"size":129,"mtime":1610471327653,"results":"37","hashOfConfig":"24"},{"size":4600,"mtime":1611609298718,"results":"38","hashOfConfig":"24"},{"size":495,"mtime":1611167599686,"results":"39","hashOfConfig":"24"},{"size":486,"mtime":1611605920870,"results":"40","hashOfConfig":"24"},{"size":138,"mtime":1611019188668,"results":"41","hashOfConfig":"24"},{"size":144,"mtime":1611019879961,"results":"42","hashOfConfig":"24"},{"size":584,"mtime":1611118791227,"results":"43","hashOfConfig":"24"},{"size":239,"mtime":1611337846766,"results":"44","hashOfConfig":"24"},{"size":5457,"mtime":1611610378321,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"11uft0a",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"48"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"48"},"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\index.tsx",[],["100","101"],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\reportWebVitals.ts",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\App.tsx",["102","103"],"import React, { useState } from 'react';\nimport { LoginComp } from './components/LoginComp';\nimport \"../src/scss/page-style.scss\";\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { LoginPage } from './views/LoginPage';\nimport { NoLoginPage } from './views/NoLoginPage';\nimport { ViewRecordsPage } from './views/ViewRecordsPage';\nimport LoggedPage from './views/LoggedPage';\nimport NotificationComp from './components/NotificationComp';\nimport UserSettingsPage from './views/UserSettingsPage';\nimport HeaderComp from './components/HeaderComp';\n\nfunction App() {\n\n  return (\n    <>\n      <div className=\"bg\">   \n          <BrowserRouter>\n          {/* Header component above all other pages */}\n          <HeaderComp />\n            <Switch>\n              <Route exact path=\"/\" component={LoginPage} />\n              <Route path=\"/LoggedIn\" component={LoggedPage} />\n              <Route path=\"/userSettings\" component={UserSettingsPage} />\n              <Route path=\"/noLogin\" component={NoLoginPage} />\n              <Route path=\"/myData\" component={ViewRecordsPage} />\n            </Switch>\n          </BrowserRouter>\n        {/* Notification component is always below every other page */}\n        <NotificationComp />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\MainComp.tsx",["104","105","106","107","108","109","110","111","112","113"],"import React, { SyntheticEvent, useEffect, useState } from \"react\"\r\nimport { TimerModal } from \"./TimerModal\";\r\nimport alarm2 from \"../assets/push_up_alarm1.wav\";\r\nimport { Redirect } from \"react-router\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { setNotifState } from \"../actions/notifActions\";\r\n\r\ninterface IProps {\r\n    email: string,\r\n}\r\n\r\nlet totalSeconds: number = 0; //global variable that you can add to other components\r\n\r\n/**\r\n * The component which contains the functionality for starting the\r\n * push up alarm. Also contains button to view the user's personal\r\n * push-up record data.\r\n * \r\n * @param props N/A\r\n*/\r\nconst MainComp: React.FC<IProps> = (props: IProps) => {\r\n    \r\n    const [hasPlayedAlarm, setPlayedAlarm] = useState(false);\r\n    const [isLoggedIn, setLoggedIn] = useState(false);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [seconds, setSeconds] = useState(0);\r\n    const [allowCountdown, setAllow] = useState(false);\r\n    const [alarmAudio, setAlarm] = useState(new Audio(alarm2));\r\n\r\n    const [redirectToRecords, setRedirectToRecords] = useState(false);\r\n    const [redirectToLogin, setRedirectToLogin] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    //checks if you are logged in\r\n    if(props.email.length == 0)\r\n    {\r\n        if(isLoggedIn == true)\r\n        {\r\n            setLoggedIn(false);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if(isLoggedIn == false)\r\n        {\r\n            setLoggedIn(true);\r\n        }\r\n    }\r\n\r\n    /** starts the timer */\r\n    const startTimer = (event:SyntheticEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        //console.log(props.email.length);\r\n\r\n        totalSeconds = event.currentTarget[\"min-input\"].value*60;\r\n        //totalSeconds = 1\r\n\r\n        if(totalSeconds > 0)\r\n        {\r\n            setSeconds(totalSeconds);\r\n            setAllow(true);\r\n            chooseAlarm();\r\n            setShowModal(!showModal);\r\n        }\r\n        else\r\n        {\r\n            const newNotif = {\r\n                id: Math.random()*10000,\r\n                show: true,\r\n                notifType: \"notif-error\",\r\n                msg: \"ERROR: No time amount has been selected.\",\r\n            }\r\n\r\n            dispatch(setNotifState(newNotif));\r\n        }\r\n        \r\n    }\r\n\r\n    useEffect(()=>{\r\n        console.log(\"allow countdown: \" + allowCountdown + \" show modal: \" + showModal);\r\n        if(allowCountdown == true && seconds > 0 && showModal == true)\r\n        {\r\n            setTimeout(()=>setSeconds(seconds -1), 1000);\r\n        }\r\n        else if(seconds === 0)\r\n        {\r\n            setSeconds(-1);\r\n            setAllow(false);\r\n            setPlayedAlarm(true);\r\n            //hasPlayedAlarm = true;\r\n        }\r\n        else if(showModal == false)\r\n        {\r\n            stopAlarm();\r\n            setSeconds(-1);\r\n            setAllow(false);\r\n        }\r\n\r\n        if(hasPlayedAlarm === true)\r\n        {\r\n            setPlayedAlarm(false);\r\n            //hasPlayedAlarm = false;\r\n            console.log(\"playing looped sound\");\r\n            alarmAudio.loop = true;\r\n            alarmAudio.play();\r\n\r\n        }\r\n    });\r\n\r\n    const chooseAlarm = () => {\r\n\r\n        //randomly choosing a looping alarm sound\r\n        const randVal = Math.round(Math.random()*2);\r\n        if (randVal == 0)\r\n        {\r\n            console.log(\"randVal = 0\");\r\n            setAlarm(new Audio(alarm2));\r\n        }\r\n        else if (randVal == 1)\r\n        {\r\n            console.log(\"randVal = 1\");\r\n            setAlarm(new Audio(alarm2));\r\n        }\r\n        else if (randVal == 2)\r\n        {\r\n            console.log(\"randVal = 2\");\r\n            setAlarm(new Audio(alarm2));\r\n        }\r\n    }\r\n\r\n    const stopAlarm = () => {\r\n        alarmAudio.pause();\r\n        alarmAudio.currentTime = 0;\r\n    }\r\n\r\n    /** gets your personal record data */\r\n    const getRecords = () => {\r\n        setRedirectToRecords(true);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"main-comp\">\r\n                    {isLoggedIn ?\r\n                        <></>\r\n                    :\r\n                        <button className=\"log-return-btn\" onClick={()=>{setRedirectToLogin(!redirectToLogin);}}>X</button>\r\n                    }\r\n                \r\n\r\n                    <div className=\"row\">\r\n                        <h4 className=\"min-label\">Minutes before alarm:</h4>\r\n                    </div>\r\n\r\n                    <form onSubmit={startTimer}>\r\n                        <div className=\"row justify-content-center\">\r\n                            <input className=\"min-input\" name=\"min-input\" type=\"number\" placeholder=\"60\" min=\"1\" max=\"9999\"/>\r\n                        </div>\r\n\r\n                        <div className=\"row justify-content-center start-div start-btn-main-row\">\r\n                            <button type=\"submit\" className=\"start-btn-main\" >Start</button>\r\n                        </div>\r\n                    </form>\r\n\r\n                    <div className=\"row justify-content-center records-div records-btn-row\">\r\n                        <button className=\"records-btn\" onClick={getRecords}>Push-Up Records</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <TimerModal show={showModal} pushUpTime={seconds} removeModalFunction={()=>{\r\n            stopAlarm();\r\n            setShowModal(!showModal);}} stopAlarmFunction={stopAlarm}\r\n            resettingTimeFunction={setSeconds} totalMinutes={totalSeconds}\r\n            allowCountdownFunction={setAllow}/>\r\n        {redirectToRecords ? <Redirect to=\"/myData\" /> : <></>}\r\n        {redirectToLogin ? <Redirect to=\"/\" /> : <></>}\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (appState: any) => {\r\n    return{\r\n        email: appState.userState.email,\r\n    };\r\n};\r\n\r\nexport default connect<IProps>(mapStateToProps)(MainComp);","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\HeaderComp.tsx",["114","115","116"],"import React, { useState } from \"react\";\r\nimport { Redirect } from \"react-router\";\r\nimport \"../scss/header.scss\";\r\nimport { ThemeToggleButton } from \"./ThemeToggleButton\";\r\nimport arrow from \"../assets/arrow.svg\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { setUserState } from \"../actions/userActions\";\r\nimport { initialUserState } from \"../reducers/userReducer\";\r\n\r\ninterface IProps {\r\n    email: string,\r\n    firstName: string,\r\n    lastName: string,\r\n}\r\n\r\n/**\r\n * Contains the logout button, site logo, and theme-toggle button.\r\n * \r\n * @param props N/A\r\n */\r\nconst HeaderComp: React.FC<IProps> = (props:IProps) => {\r\n\r\n    const [redirectToLogin, setRedirectToLog] = useState(false);\r\n    const [redirectToSettings, setRedirectToSettings] = useState(false);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    /** logs the user out */\r\n    const logout = () => {\r\n        dispatch(setUserState(initialUserState));\r\n\r\n        // if(isLoggedIn == true)\r\n        // {\r\n        //     setIsLoggedIn(false);\r\n        // }\r\n\r\n        setRedirectToLog(true);\r\n        setTimeout(()=>setRedirectToLog(false),10);\r\n    }\r\n\r\n    /** sends you to the settings page */\r\n    const settings = () => {\r\n        if(redirectToSettings != true)\r\n        {\r\n            setRedirectToSettings(true);\r\n            setTimeout(()=>setRedirectToSettings(false),10);\r\n        }\r\n    }\r\n\r\n    if(props.email.length > 0)\r\n    {\r\n        if(isLoggedIn == false)\r\n        {\r\n            setIsLoggedIn(true);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if(isLoggedIn == true)\r\n        {\r\n            setIsLoggedIn(false);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"rounded-div header\">\r\n        <div className=\"container\">\r\n            <div className=\"row justify-content-center\">\r\n            \r\n            {isLoggedIn ?\r\n            <>\r\n                <div className=\"col-1\">\r\n                    {/* only render this button if the user is logged in */}\r\n                    <button className=\"logout-btn\"\r\n                    onClick={logout}>Logout</button>\r\n                </div>\r\n                <div className=\"col-1\">\r\n                    {/* only render this button if the user is logged in */}\r\n                    <button className=\"theme-btn\"\r\n                    onClick={settings}>Settings</button>\r\n                </div> \r\n            </>\r\n            :\r\n                <div className=\"col-2\">\r\n                    <></>\r\n                </div> \r\n            }\r\n                \r\n                <div className=\"col-8 text-center\" >\r\n                    <h1 className=\"app-name\">PUSH UP APP</h1>\r\n                    <img className=\"logo\" src={arrow} alt=\"logo\" />\r\n                </div>\r\n\r\n                <ThemeToggleButton />\r\n\r\n            </div>\r\n            {isLoggedIn ? \r\n                <div className=\"container\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <p className=\"logged-name\">Logged in as: {props.firstName} {props.lastName}</p>\r\n                    </div>\r\n                </div>\r\n            :\r\n            <></>\r\n            }\r\n\r\n            {redirectToLogin ? <Redirect to=\"/\"/> : <></>}\r\n            {redirectToSettings ? <Redirect to=\"/userSettings\"/> : <></>}\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (appState: any) => {\r\n    return{\r\n        email: appState.userState.email,\r\n        firstName: appState.userState.firstName,\r\n        lastName: appState.userState.lastName,\r\n    };\r\n};\r\n\r\nexport default connect<IProps>(mapStateToProps)(HeaderComp);","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\TimerModal.tsx",["117","118","119","120","121","122","123","124","125"],"import { Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\r\nimport React, { SyntheticEvent, useEffect, useState } from \"react\";\r\nimport \"../scss/page-style.scss\";\r\nimport { wait } from \"@testing-library/react\";\r\n\r\ninterface IProps{\r\n    show: boolean,\r\n    pushUpTime: number,\r\n    removeModalFunction: any,\r\n    stopAlarmFunction: any,\r\n    resettingTimeFunction: any,\r\n    allowCountdownFunction: any,\r\n    totalMinutes: number,\r\n}\r\n\r\nexport const TimerModal: React.FC<IProps> = (props:IProps) => {\r\n\r\n    const [waitTime,setWaitTime] = useState(-1);\r\n    const [progressTime,setProgressTime] = useState(0);\r\n    const [showPushUpCountdown, setShowPushCountdown] = useState(false);\r\n    const [showInProgress, setInProgress] = useState(false);\r\n    const [showRecordInput, setRecordInput] = useState(false);\r\n\r\n    let showReady = false;\r\n\r\n    //Bunch of if statements which format the minutes given by the user \r\n    // into a proper hours:minutes:seconds format\r\n    let formattedTime: string = \"\";\r\n    let minutes: number = 0;\r\n    let hours: number = 0;\r\n    if (Math.trunc(Math.trunc(props.pushUpTime/60)/60) > 0 && props.pushUpTime%60 !== 0)\r\n    {\r\n        hours = Math.trunc(Math.trunc(props.pushUpTime/60)/60);\r\n        minutes = Math.trunc(props.pushUpTime/60)%60;\r\n        formattedTime = hours + \":\" + (minutes < 10 ? \"0\" : \"\") + minutes + \":\" + \r\n        (props.pushUpTime%60 < 10 ? \"0\" : \"\") + props.pushUpTime%60;\r\n        showReady = false;\r\n    }\r\n    else if (Math.trunc(props.pushUpTime/60) > 0 && props.pushUpTime%60 !== 0)\r\n    {\r\n        minutes = Math.trunc(props.pushUpTime/60);\r\n        formattedTime = (minutes < 10 ? \"0\" : \"\") + minutes + \":\" + \r\n        (props.pushUpTime%60 < 10 ? \"0\" : \"\") +props.pushUpTime%60;\r\n        showReady = false;\r\n    }\r\n    else if (Math.trunc(props.pushUpTime/60) > 0 && props.pushUpTime%60 === 0)\r\n    {\r\n        minutes = Math.trunc(props.pushUpTime/60);\r\n        formattedTime = minutes + \":\" + \"00\";\r\n        showReady = false;\r\n    }\r\n    else if (Math.trunc(props.pushUpTime/60) === 0 && props.pushUpTime >= 0)\r\n    {\r\n        formattedTime = `${props.pushUpTime}`;\r\n        showReady = false;\r\n    }\r\n    else if (props.pushUpTime < 0)\r\n    {\r\n        formattedTime = \"0\";\r\n        showReady = true;\r\n    }\r\n\r\n    /** initializes the 5 second wait timer and stops playing the alarm */\r\n    const beginPushUp = () => {\r\n        setWaitTime(5);\r\n        setProgressTime(0);\r\n        props.stopAlarmFunction();\r\n        setShowPushCountdown(true);   \r\n    }\r\n\r\n    /** allows the user to input how many pushups they did */\r\n    const doneWithSet = (event:SyntheticEvent<HTMLFormElement>) => {\r\n        //submit the data somehow\r\n        const numberOfPushUps = event.currentTarget[\"input\"].value;\r\n\r\n        if(sessionStorage.getItem(\"tempSets\") == null)\r\n        {\r\n            sessionStorage.setItem(\"tempSets\",\"1\");\r\n        }\r\n        else\r\n        {\r\n            const currentSetString:any = sessionStorage.getItem(\"tempSets\");\r\n            const currentSetCount:number = parseInt(currentSetString);\r\n\r\n            sessionStorage.setItem(\"tempSets\", `${currentSetCount+1}`);\r\n        }\r\n        \r\n        const currentDate = new Date();\r\n        const currentDateString:string = `${currentDate.getMonth()+1} ${currentDate.getDay()}, \r\n        ${currentDate.getFullYear()} ${currentDate.getHours()%12}:`+\r\n        `${(currentDate.getMinutes() < 10 ? \"0\" : \"\") + currentDate.getMinutes()}`;\r\n\r\n        sessionStorage.setItem(\"tempData\", JSON.stringify({\r\n            date: currentDateString, \r\n            lastSetInterval: props.totalMinutes/60,\r\n            lastPushUpTime: progressTime,\r\n            lastPushUpCount: numberOfPushUps,\r\n        }));\r\n\r\n        //sessionStorage.setItem(\"\",{date: })\r\n        //trigger a reset of the push-up timer\r\n        console.log(props.totalMinutes);\r\n        props.resettingTimeFunction(props.totalMinutes);\r\n        props.allowCountdownFunction(true);\r\n        setInProgress(false);\r\n        setRecordInput(false);\r\n        setShowPushCountdown(false);\r\n    }\r\n\r\n    /** resets the components data before removing the modal */\r\n    const toggleReset = () => {\r\n        showReady = false;\r\n        setWaitTime(5);\r\n        setProgressTime(0);\r\n        setShowPushCountdown(false);\r\n        setInProgress(false);\r\n        setRecordInput(false);\r\n        props.removeModalFunction();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        console.log(\"show push up countdown: \" + showPushUpCountdown);\r\n        console.log(\"show ready button: \" + showReady);\r\n        console.log(\"show in progress: \" + showInProgress);\r\n        console.log(\"show record input: \" + showRecordInput);\r\n        \r\n        if(showPushUpCountdown == true && waitTime > 0 && showInProgress == false)\r\n        {\r\n            setTimeout(()=>setWaitTime(waitTime - 1), 1000);\r\n        }\r\n        else if (waitTime == 0 && showInProgress == false)\r\n        {\r\n            //setShowPushCount(false);\r\n            setWaitTime(-1);  \r\n\r\n            //start regular time\r\n            setInProgress(true);\r\n            setShowPushCountdown(true);\r\n\r\n        }\r\n        else if (showInProgress == true && showRecordInput == false)\r\n        {\r\n            setTimeout(()=>setProgressTime(progressTime +1), 1000);\r\n        }\r\n    })\r\n\r\n    return(\r\n        \r\n        <Modal isOpen={props.show} toggle={toggleReset} modalClassName=\"timer-modal-bg\" contentClassName=\"timer-modal-content\">\r\n            <ModalHeader className=\"timer-modal-head\">\r\n                {showPushUpCountdown ? \r\n                \r\n                    showInProgress ? \r\n                    <h2>Current Push-up time:</h2>\r\n                    :\r\n                    <h2>Get on the floor!!</h2> \r\n                :\r\n                <h2>Time left before next PUSH UP:</h2> }   \r\n            </ModalHeader>\r\n            <ModalBody >\r\n                {showPushUpCountdown ? \r\n                \r\n                    showInProgress ?\r\n                    <p className=\"timer-prog\" >{ progressTime }</p> \r\n                    :\r\n                    <p className=\"timer-wait\" key={Math.random()}>{ waitTime }</p> \r\n                :\r\n                <p className=\"timer\" key={Math.random()}>{ formattedTime }</p> }\r\n            </ModalBody>\r\n            <ModalFooter className=\"timer-modal-foot\">\r\n                {showPushUpCountdown ? \r\n                    \r\n                    showInProgress ? \r\n\r\n                        showRecordInput ?\r\n\r\n                            <form onSubmit={doneWithSet}>\r\n                                <div><h4>How many push-ups?</h4></div>\r\n                                <div><input className=\"push-input\" name=\"input\" type=\"number\" placeholder=\"?\" min=\"1\" max=\"9999\"/></div>\r\n                                <div><input className=\"start-btn\" type=\"submit\" value=\"Submit and reset timer\"/></div>\r\n                            </form>\r\n                            :\r\n                            <>\r\n                                <div><button className=\"done-btn\" onClick={()=>\r\n                                    {setRecordInput(!showRecordInput)}}>I'm Donezo</button></div>\r\n                                <div><h4 className=\"click-any-sm\" >Click anywhere else to stop the timer</h4></div>\r\n                            </>\r\n\r\n                    :\r\n                    <></>\r\n                :\r\n                \r\n                    showReady ?\r\n                    \r\n                        showInProgress ? \r\n\r\n                        <></>\r\n                        :\r\n                        <>\r\n                            <div><button className=\"timer-btn\" onClick={beginPushUp}>READY FOR PUSH-UPS??</button></div>\r\n                            <div><h4 className=\"click-any-sm\" >Click anywhere else to stop the timer</h4></div>\r\n                        </>\r\n                    :\r\n                    <h4 className=\"click-any-lg\" >Click anywhere to stop the timer</h4>\r\n                }\r\n                    \r\n            </ModalFooter>\r\n        </Modal>\r\n    )\r\n}","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\NotificationComp.tsx",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\views\\LoginPage.tsx",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\views\\NoLoginPage.tsx",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\LoginComp.tsx",["126","127","128","129","130","131"],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\views\\ViewRecordsPage.tsx",["132","133","134"],"import React, { useState } from \"react\";\r\nimport { Redirect } from \"react-router\";\r\nimport \"../scss/view-data.scss\";\r\ninterface IProps {\r\n\r\n}\r\n\r\nlet tempData: any;\r\nexport const ViewRecordsPage: React.FC<IProps> = (props:IProps) => {\r\n\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [doRecordsExist, setDoRecordsExist] =useState(false);\r\n    const [redirectToTimer, setRedirect] = useState(false);\r\n\r\n    if(sessionStorage.getItem(\"tempData\") != null)\r\n    {\r\n        tempData = JSON.parse(sessionStorage.tempData);\r\n    }\r\n\r\n    const backToTimer = () => {\r\n        setRedirect(true);\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            {isLoggedIn ?\r\n            <></>\r\n            :\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"temp-comp\">\r\n                    {sessionStorage.getItem(\"tempData\") != null ?\r\n                    <>\r\n                        <h3>Latest push-up data:</h3>\r\n                        <hr></hr>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-6\" style={{textAlign:\"right\"}}>Date:</div>\r\n                            <div className=\"col-6\" style={{textAlign:\"left\"}}>{tempData.date}</div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-6\" style={{textAlign:\"right\"}}>Sets:</div>\r\n                            <div className=\"col-6\" style={{textAlign:\"left\"}}>{sessionStorage.tempSets} set(s)</div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-6\" style={{textAlign:\"right\"}}>Last Set Interval:</div>\r\n                            <div className=\"col-6\" style={{textAlign:\"left\"}}>{tempData.lastSetInterval} minute(s)</div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-6\" style={{textAlign:\"right\"}}>Last Push-Up Time:</div>\r\n                            <div className=\"col-6\" style={{textAlign:\"left\"}}>{tempData.lastPushUpTime} second(s)</div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-6\" style={{textAlign:\"right\"}}>Last Push-Up Count:</div>\r\n                            <div className=\"col-6\" style={{textAlign:\"left\"}}>{tempData.lastPushUpCount} push-up(s)</div>\r\n                        </div>\r\n                    </>\r\n                    :\r\n                    <p style={{textAlign: \"center\"}}>Sorry no records found.</p>\r\n                    }\r\n\r\n                    <div className=\"row justify-content-center back-btn-row\">\r\n                        <button className=\"back-btn\"\r\n                        onClick={backToTimer}>Back to timer</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            }\r\n            {redirectToTimer ? <Redirect to=\"/noLogin\" /> : <></>}\r\n        </div>\r\n    )\r\n}","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\ThemeToggleButton.tsx",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\RegisterComp.tsx",["135","136","137","138","139","140","141","142"],"import { EventEmitter } from \"events\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setNotifState } from \"../actions/notifActions\";\r\nimport \"../scss/page-style.scss\";\r\nimport axiosConfig from \"../util/axiosConfig\";\r\nimport { PushUpSpinner } from \"./PushUpSpinner\";\r\n\r\ninterface IProps {\r\n    toggleFunction:Function;\r\n}\r\n\r\nexport const RegisterComp: React.FC<IProps> = (props:IProps) => {\r\n\r\n    const [showSpinner, setShowSpinner] = useState(false);\r\n\r\n    const disptach = useDispatch();\r\n\r\n    const registerAttempt = (event:SyntheticEvent<HTMLFormElement>) =>\r\n    {\r\n        event.preventDefault();\r\n\r\n        if(showSpinner == false)\r\n        {\r\n            const pass = event.currentTarget[\"password\"].value;\r\n            const pass2 = event.currentTarget[\"password2\"].value;\r\n            const email = event.currentTarget[\"email\"].value;\r\n            const firstName = event.currentTarget[\"fName\"].value;\r\n            const lastName = event.currentTarget[\"lName\"].value;\r\n\r\n            setShowSpinner(true);\r\n            if(pass != \"\" && pass2 != \"\" && email != \"\" \r\n            && firstName != \"\" && lastName != \"\")\r\n            {\r\n                if(pass === pass2)\r\n                {\r\n                \r\n                axiosConfig.post(`/users/create/${email}+${pass}+${firstName}+${lastName}`)\r\n                .then(()=>{\r\n                    //stop spinner and show notification of a successful user addition\r\n                    //alert(`User: ${firstName} ${lastName} successfully added!`);\r\n                    \r\n                    setShowSpinner(false);\r\n                    const newNotif = {\r\n                        id: Math.random()*10000,\r\n                        show: true,\r\n                        notifType: \"notif-info\",\r\n                        msg: `User: ${firstName} ${lastName} successfully added! Verification email sent.`,\r\n                    }\r\n        \r\n                    disptach(setNotifState(newNotif));\r\n\r\n                    props.toggleFunction();\r\n                    })\r\n                    .catch((error)=>{\r\n                        console.log(error);\r\n                    \r\n                        setShowSpinner(false);\r\n                        const newNotif = {\r\n                            id: Math.random()*10000,\r\n                            show: true,\r\n                            notifType: \"notif-error\",\r\n                            msg: `ERROR: User unable to be added.`,\r\n                        }\r\n        \r\n                        disptach(setNotifState(newNotif));\r\n\r\n                    })\r\n                }\r\n                else\r\n                {\r\n                    setShowSpinner(false);\r\n                    const newNotif = {\r\n                        id: Math.random()*10000,\r\n                        notifType: \"notif-error\",\r\n                        show: true,\r\n                        msg: `ERROR: Passwords do not match.`,\r\n                    }\r\n    \r\n                    disptach(setNotifState(newNotif));\r\n                }\r\n            }\r\n            else\r\n            {\r\n                setShowSpinner(false);\r\n                const newNotif = {\r\n                    id: Math.random()*10000,\r\n                    show: true,\r\n                    notifType: \"notif-error\",\r\n                    msg: `ERROR: Not all fields are filled in.`,\r\n                }\r\n\r\n                disptach(setNotifState(newNotif));\r\n            }   \r\n        }\r\n    }\r\n\r\n    const closeForm = () => {\r\n        props.toggleFunction();\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"row justify-content-center\">\r\n                <h2>Register:</h2>\r\n            </div>\r\n\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"log-comp\">\r\n                <button className=\"log-return-btn\" onClick={closeForm}>X</button>\r\n                    <form onSubmit={registerAttempt}>\r\n                        <div className=\"row justify-content-center\">\r\n                            <h4 id=\"e-label\" style={{textAlign: \"center\", margin: \"auto\"}}>Enter Your Email:</h4>\r\n                        </div>\r\n                        <div className=\"row justify-content-center\">\r\n                            <input id=\"email\" type=\"email\" name=\"email\" \r\n                            className=\"push-input\" placeholder=\"yo@whatup.biz\" />\r\n                        </div>\r\n\r\n                        <div className=\"row justify-content-center\" style={{marginTop: 20}}>\r\n                            <h4 id=\"p-label\" style={{textAlign: \"center\", margin: \"auto\"}}>Enter A Password:</h4>\r\n                        </div>\r\n                        <div className=\"row justify-content-center\">\r\n                            <input id=\"pass\" type=\"password\" name=\"password\" \r\n                            className=\"push-input\" placeholder=\"*********\" />\r\n                        </div>\r\n\r\n                        <div className=\"row justify-content-center\" style={{marginTop: 20}}>\r\n                            <h4 id=\"p-label\" style={{textAlign: \"center\", margin: \"auto\"}}>Enter That Password Again:</h4>\r\n                        </div>\r\n                        <div className=\"row justify-content-center\">\r\n                            <input id=\"pass2\" type=\"password\" name=\"password2\" \r\n                            className=\"push-input\" placeholder=\"*********\" />\r\n                        </div>\r\n\r\n                        <div className=\"row justify-content-center\" style={{marginTop: 20}}>\r\n                            <h4 id=\"p-label\" style={{textAlign: \"center\", margin: \"auto\"}}>Enter Your First Name:</h4>\r\n                        </div>\r\n                        <div className=\"row justify-content-center\">\r\n                            <input id=\"fName\" type=\"text\" name=\"fName\" \r\n                            className=\"push-input\" placeholder=\"Bob\" />\r\n                        </div>\r\n\r\n                        <div className=\"row justify-content-center\" style={{marginTop: 20}}>\r\n                            <h4 id=\"p-label\" style={{textAlign: \"center\", margin: \"auto\"}}>Enter Your Last Name:</h4>\r\n                        </div>\r\n                        <div className=\"row justify-content-center\">\r\n                            <input id=\"lName\" type=\"text\" name=\"lName\" \r\n                            className=\"push-input\" placeholder=\"Bobbington\" />\r\n                        </div>\r\n\r\n                        <div className=\"row justify-content-center start-btn-row\" style={{marginTop: 20}}>\r\n                            <input id=\"log-btn\" type=\"submit\" value=\"Register\" \r\n                            className=\"start-btn\"/>\r\n                        </div>\r\n\r\n                        {showSpinner ?\r\n                        <div className=\"row justify-content-center\" style={{marginTop: 5}}>\r\n                            {/* <Spinner animation=\"grow\" variant=\"info\"/> */}\r\n                            <PushUpSpinner />\r\n                        </div>\r\n                        :\r\n                        <></>\r\n                        }\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>  \r\n    )\r\n}","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\util\\axiosConfig.ts",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\views\\LoggedPage.tsx",["143","144","145","146","147","148"],"import React, { useState } from \"react\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport MainComp from \"../components/MainComp\";\r\nimport nope from \"../assets/nope.gif\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport axiosConfig from \"../util/axiosConfig\";\r\nimport { setNotifState } from \"../actions/notifActions\";\r\nimport { PushUpSpinner } from \"../components/PushUpSpinner\";\r\n\r\ninterface IProps {\r\n    userid: number,\r\n    email: string,\r\n    firstName: string,\r\n    lastName: string,\r\n    verified: boolean,\r\n}\r\n\r\nconst LoggedPage: React.FC<IProps> = (props:IProps) => {\r\n\r\n    const [ifVerified, setVerified] = useState(false);\r\n    const [showSpinner, setShowSpinner] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    //goes back to login page if not logged in\r\n    if(props.email.length == 0)\r\n    {\r\n        window.location.href=\"/\";\r\n    }\r\n\r\n    if (props.verified == true && ifVerified != true)\r\n    {\r\n        setVerified(true);\r\n    }\r\n\r\n    const reSendEmail = () => {\r\n        //make sure that multipule clicks won't send multipule new emails\r\n        if (showSpinner == false)\r\n        {\r\n            setShowSpinner(true);\r\n            axiosConfig.post(\"/verify/resend/\"+props.email)\r\n            .then((response)=> {\r\n                console.log(response\r\n                    );\r\n\r\n                if(response.status == 200)\r\n                {\r\n                    setShowSpinner(false);\r\n                    const newNotif = {\r\n                        id: Math.random()*10000,\r\n                        show: true,\r\n                        notifType: \"notif-info\",\r\n                        msg: \"**New code sent to: \" + props.email + \"**\",\r\n                    }\r\n    \r\n                    dispatch(setNotifState(newNotif));\r\n                }\r\n                else\r\n                {\r\n                    setShowSpinner(false);\r\n                    const newNotif = {\r\n                        id: Math.random()*10000,\r\n                        show: true,\r\n                        notifType: \"notif-error\",\r\n                        msg: \"ERROR: Unknown error. Email not sent.\",\r\n                    }\r\n    \r\n                    dispatch(setNotifState(newNotif));\r\n                }\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n\r\n                setShowSpinner(false);\r\n                const newNotif = {\r\n                    id: Math.random()*10000,\r\n                    show: true,\r\n                    notifType: \"notif-error\",\r\n                    msg: \"ERROR: Unknown error. Email not sent.\",\r\n                }\r\n    \r\n                dispatch(setNotifState(newNotif));\r\n            });\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n            {ifVerified ?\r\n            <>\r\n                {/* <div className=\"container\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <h3 style={{marginTop: 5, marginBottom: 20}}>\r\n                            Welcome back {props.firstName} {props.lastName}!</h3>\r\n                    </div>\r\n                </div> */}\r\n                <MainComp />\r\n            </>\r\n            :\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    <h1>{props.firstName} {props.lastName} has NOT verified their email.</h1>\r\n                </div>\r\n\r\n                <div className=\"row justify-content-center\">\r\n                    <img className=\"nope-img\" src={nope} alt=\"nope.gif\" />\r\n                </div>\r\n\r\n                <div className=\"row justify-content-center no-log-btn-sm-row\" style={{marginTop: 15}}>\r\n                    <button className=\"no-login-btn-sm\" \r\n                    onClick={reSendEmail}>Re-send verification email</button>\r\n                </div>\r\n\r\n                {showSpinner ?\r\n                    <div className=\"row justify-content-center\">\r\n                        {/* <Spinner animation=\"grow\" variant=\"warning\" /> */}\r\n                        <PushUpSpinner />\r\n                    </div>\r\n                :\r\n                    <></>\r\n                }\r\n                \r\n            </div>\r\n                \r\n            }\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (appState: any) => {\r\n    return{\r\n        userid: appState.userState.userid,\r\n        email: appState.userState.email,\r\n        firstName: appState.userState.firstName,\r\n        lastName: appState.userState.lastName,\r\n        verified: appState.userState.verified,\r\n    };\r\n};\r\n\r\nexport default connect<any>(mapStateToProps)(LoggedPage);","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\reducers\\userReducer.ts",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\reducers\\notifReducer.ts",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\actions\\userActions.ts",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\actions\\notifActions.ts",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\util\\sessionStorage.ts",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\PushUpSpinner.tsx",["149"],"import react from \"react\";\r\nimport \"../scss/page-style.scss\";\r\n\r\ninterface IProps {\r\n\r\n}\r\n\r\nexport const PushUpSpinner: React.FC<IProps> = (props:IProps) => {\r\n\r\n    return (\r\n        <div className=\"push-up-ani\">\r\n        </div>\r\n    )\r\n}","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\views\\UserSettingsPage.tsx",["150","151","152","153"],"import React from \"react\";\r\nimport react, { SyntheticEvent, useState } from \"react\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\nimport { setNotifState } from \"../actions/notifActions\";\r\nimport { PushUpSpinner } from \"../components/PushUpSpinner\";\r\nimport axiosConfig from \"../util/axiosConfig\";\r\n\r\ninterface IProps {\r\n    userid: number,\r\n    email: string,\r\n    firstName: string,\r\n    lastName: string,\r\n    verified: boolean,\r\n}\r\n\r\nconst UserSettingsPage:React.FC<IProps> = (props:IProps) => {\r\n\r\n    const [redirectToLogin, setRedirect] = useState(false);\r\n    const [showSpinner, setShowSpinner] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    //goes back to login page if not logged in\r\n    if(props.email.length == 0)\r\n    {\r\n        window.location.href=\"/\";\r\n    }\r\n\r\n    const changePassword = (event:SyntheticEvent<HTMLFormElement>) => {\r\n\r\n        event.preventDefault();\r\n\r\n        const pass = event.currentTarget[\"password\"].value;\r\n        const pass2 = event.currentTarget[\"password2\"].value;\r\n\r\n        if (pass === pass2 && pass != \"\")\r\n        {\r\n            axiosConfig.post(\"/users/changePass/\"+props.email+\"+\"+pass)\r\n            .then((response)=>{\r\n                console.log(response);\r\n                console.log(response.data);\r\n\r\n                const newNotif = {\r\n                    id: Math.random()*10000,\r\n                    show: true,\r\n                    notifType: \"notif-info\",\r\n                    msg: \"***Password successfully changed to: \"+pass,\r\n                }\r\n    \r\n                dispatch(setNotifState(newNotif));\r\n            })\r\n            .catch(()=>{\r\n                const newNotif = {\r\n                    id: Math.random()*10000,\r\n                    show: true,\r\n                    notifType: \"notif-error\",\r\n                    msg: \"ERROR: Unknown error. Password was not altered.\",\r\n                }\r\n    \r\n                dispatch(setNotifState(newNotif));\r\n            })\r\n        }\r\n        else if (pass == \"\")\r\n        {\r\n            setShowSpinner(false);\r\n                const newNotif = {\r\n                    id: Math.random()*10000,\r\n                    show: true,\r\n                    notifType: \"notif-error\",\r\n                    msg: \"ERROR: Nothing entered in either text box.\",\r\n                }\r\n    \r\n                dispatch(setNotifState(newNotif));\r\n        }\r\n        else\r\n        {\r\n            setShowSpinner(false);\r\n                const newNotif = {\r\n                    id: Math.random()*10000,\r\n                    show: true,\r\n                    notifType: \"notif-error\",\r\n                    msg: \"ERROR: New passwords do not match.\",\r\n                }\r\n    \r\n                dispatch(setNotifState(newNotif));\r\n        }\r\n    }\r\n\r\n    const closeForm = () => {\r\n        setRedirect(!redirectToLogin);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row justify-content-center\" style={{marginBottom: 10, marginTop: 5}}>\r\n                <h2>User Settings:</h2>\r\n            </div>\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"log-comp\">\r\n                <button className=\"log-return-btn\" onClick={closeForm}>X</button>\r\n                    {/* change password form */}\r\n                    <form onSubmit={changePassword}>\r\n                        <div className=\"row justify-content-center\" style={{marginTop: 20}}>\r\n                            <h4 id=\"p-label\" style={{textAlign: \"center\", margin: \"auto\"}}>Enter A New Password:</h4>\r\n                        </div>\r\n                        <div className=\"row justify-content-center\">\r\n                            <input id=\"pass\" type=\"password\" name=\"password\" \r\n                            className=\"push-input\" placeholder=\"*********\" />\r\n                        </div>\r\n\r\n                        <div className=\"row justify-content-center\" style={{marginTop: 20}}>\r\n                            <h4 id=\"p-label\" style={{textAlign: \"center\", margin: \"auto\"}}>Re-enter That New Password:</h4>\r\n                        </div>\r\n                        <div className=\"row justify-content-center\">\r\n                            <input id=\"pass2\" type=\"password\" name=\"password2\" \r\n                            className=\"push-input\" placeholder=\"*********\" />\r\n                        </div>\r\n\r\n                        <div className=\"row justify-content-center start-btn-row\" style={{marginTop: 20}}>\r\n                            <input id=\"sub-btn\" type=\"submit\" value=\"Submit Changes\" \r\n                            className=\"start-btn\"/>\r\n                        </div>\r\n                    </form>\r\n                    \r\n                    {showSpinner ?\r\n                    <div className=\"row justify-content-center\">\r\n                        <PushUpSpinner />\r\n                    </div>\r\n                :\r\n                    <></>\r\n                }\r\n                </div>\r\n            </div>\r\n            {redirectToLogin ? <Redirect to=\"/LoggedIn\"/> : <></>}\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (appState: any) => {\r\n    return{\r\n        userid: appState.userState.userid,\r\n        email: appState.userState.email,\r\n        firstName: appState.userState.firstName,\r\n        lastName: appState.userState.lastName,\r\n        verified: appState.userState.verified,\r\n    };\r\n};\r\n\r\nexport default connect<any>(mapStateToProps)(UserSettingsPage);",{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":1,"column":17,"nodeType":"160","messageId":"161","endLine":1,"endColumn":25},{"ruleId":"158","severity":1,"message":"162","line":2,"column":10,"nodeType":"160","messageId":"161","endLine":2,"endColumn":19},{"ruleId":"163","severity":1,"message":"164","line":36,"column":27,"nodeType":"165","messageId":"166","endLine":36,"endColumn":29},{"ruleId":"163","severity":1,"message":"164","line":38,"column":23,"nodeType":"165","messageId":"166","endLine":38,"endColumn":25},{"ruleId":"163","severity":1,"message":"164","line":45,"column":23,"nodeType":"165","messageId":"166","endLine":45,"endColumn":25},{"ruleId":"167","severity":1,"message":"168","line":80,"column":5,"nodeType":"160","endLine":80,"endColumn":14,"suggestions":"169"},{"ruleId":"163","severity":1,"message":"164","line":82,"column":27,"nodeType":"165","messageId":"166","endLine":82,"endColumn":29},{"ruleId":"163","severity":1,"message":"164","line":82,"column":63,"nodeType":"165","messageId":"166","endLine":82,"endColumn":65},{"ruleId":"163","severity":1,"message":"164","line":93,"column":27,"nodeType":"165","messageId":"166","endLine":93,"endColumn":29},{"ruleId":"163","severity":1,"message":"164","line":115,"column":21,"nodeType":"165","messageId":"166","endLine":115,"endColumn":23},{"ruleId":"163","severity":1,"message":"164","line":120,"column":26,"nodeType":"165","messageId":"166","endLine":120,"endColumn":28},{"ruleId":"163","severity":1,"message":"164","line":125,"column":26,"nodeType":"165","messageId":"166","endLine":125,"endColumn":28},{"ruleId":"163","severity":1,"message":"170","line":43,"column":31,"nodeType":"165","messageId":"166","endLine":43,"endColumn":33},{"ruleId":"163","severity":1,"message":"164","line":52,"column":23,"nodeType":"165","messageId":"166","endLine":52,"endColumn":25},{"ruleId":"163","severity":1,"message":"164","line":59,"column":23,"nodeType":"165","messageId":"166","endLine":59,"endColumn":25},{"ruleId":"158","severity":1,"message":"171","line":4,"column":10,"nodeType":"160","messageId":"161","endLine":4,"endColumn":14},{"ruleId":"172","severity":1,"message":"173","line":49,"column":39,"nodeType":"165","messageId":"174","endLine":49,"endColumn":40},{"ruleId":"167","severity":1,"message":"175","line":121,"column":5,"nodeType":"160","endLine":121,"endColumn":14,"suggestions":"176"},{"ruleId":"163","severity":1,"message":"164","line":127,"column":32,"nodeType":"165","messageId":"166","endLine":127,"endColumn":34},{"ruleId":"163","severity":1,"message":"164","line":127,"column":74,"nodeType":"165","messageId":"166","endLine":127,"endColumn":76},{"ruleId":"163","severity":1,"message":"164","line":131,"column":27,"nodeType":"165","messageId":"166","endLine":131,"endColumn":29},{"ruleId":"163","severity":1,"message":"164","line":131,"column":50,"nodeType":"165","messageId":"166","endLine":131,"endColumn":52},{"ruleId":"163","severity":1,"message":"164","line":141,"column":33,"nodeType":"165","messageId":"166","endLine":141,"endColumn":35},{"ruleId":"163","severity":1,"message":"164","line":141,"column":60,"nodeType":"165","messageId":"166","endLine":141,"endColumn":62},{"ruleId":"158","severity":1,"message":"177","line":1,"column":8,"nodeType":"160","messageId":"161","endLine":1,"endColumn":13},{"ruleId":"158","severity":1,"message":"178","line":2,"column":10,"nodeType":"160","messageId":"161","endLine":2,"endColumn":22},{"ruleId":"158","severity":1,"message":"179","line":6,"column":10,"nodeType":"160","messageId":"161","endLine":6,"endColumn":17},{"ruleId":"163","severity":1,"message":"164","line":30,"column":25,"nodeType":"165","messageId":"166","endLine":30,"endColumn":27},{"ruleId":"163","severity":1,"message":"164","line":105,"column":24,"nodeType":"165","messageId":"166","endLine":105,"endColumn":26},{"ruleId":"180","severity":1,"message":"181","line":221,"column":17,"nodeType":"182","endLine":221,"endColumn":65},{"ruleId":"158","severity":1,"message":"183","line":11,"column":24,"nodeType":"160","messageId":"161","endLine":11,"endColumn":37},{"ruleId":"158","severity":1,"message":"184","line":12,"column":12,"nodeType":"160","messageId":"161","endLine":12,"endColumn":26},{"ruleId":"158","severity":1,"message":"185","line":12,"column":28,"nodeType":"160","messageId":"161","endLine":12,"endColumn":45},{"ruleId":"158","severity":1,"message":"178","line":1,"column":10,"nodeType":"160","messageId":"161","endLine":1,"endColumn":22},{"ruleId":"158","severity":1,"message":"179","line":3,"column":10,"nodeType":"160","messageId":"161","endLine":3,"endColumn":17},{"ruleId":"163","severity":1,"message":"164","line":24,"column":24,"nodeType":"165","messageId":"166","endLine":24,"endColumn":26},{"ruleId":"163","severity":1,"message":"170","line":33,"column":21,"nodeType":"165","messageId":"166","endLine":33,"endColumn":23},{"ruleId":"163","severity":1,"message":"170","line":33,"column":36,"nodeType":"165","messageId":"166","endLine":33,"endColumn":38},{"ruleId":"163","severity":1,"message":"170","line":33,"column":51,"nodeType":"165","messageId":"166","endLine":33,"endColumn":53},{"ruleId":"163","severity":1,"message":"170","line":34,"column":26,"nodeType":"165","messageId":"166","endLine":34,"endColumn":28},{"ruleId":"163","severity":1,"message":"170","line":34,"column":44,"nodeType":"165","messageId":"166","endLine":34,"endColumn":46},{"ruleId":"158","severity":1,"message":"179","line":5,"column":10,"nodeType":"160","messageId":"161","endLine":5,"endColumn":17},{"ruleId":"163","severity":1,"message":"164","line":26,"column":27,"nodeType":"165","messageId":"166","endLine":26,"endColumn":29},{"ruleId":"163","severity":1,"message":"164","line":31,"column":24,"nodeType":"165","messageId":"166","endLine":31,"endColumn":26},{"ruleId":"163","severity":1,"message":"170","line":31,"column":46,"nodeType":"165","messageId":"166","endLine":31,"endColumn":48},{"ruleId":"163","severity":1,"message":"164","line":38,"column":25,"nodeType":"165","messageId":"166","endLine":38,"endColumn":27},{"ruleId":"163","severity":1,"message":"164","line":46,"column":36,"nodeType":"165","messageId":"166","endLine":46,"endColumn":38},{"ruleId":"158","severity":1,"message":"186","line":1,"column":8,"nodeType":"160","messageId":"161","endLine":1,"endColumn":13},{"ruleId":"158","severity":1,"message":"186","line":2,"column":8,"nodeType":"160","messageId":"161","endLine":2,"endColumn":13},{"ruleId":"163","severity":1,"message":"164","line":24,"column":27,"nodeType":"165","messageId":"166","endLine":24,"endColumn":29},{"ruleId":"163","severity":1,"message":"170","line":36,"column":36,"nodeType":"165","messageId":"166","endLine":36,"endColumn":38},{"ruleId":"163","severity":1,"message":"164","line":63,"column":23,"nodeType":"165","messageId":"166","endLine":63,"endColumn":25},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'LoginComp' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setSeconds'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [allowCountdown, showModal, seconds, hasPlayedAlarm, stopAlarm, alarmAudio] as a second argument to the useEffect Hook.",["189"],"Expected '!==' and instead saw '!='.","'wait' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect contains a call to 'setWaitTime'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [showPushUpCountdown, showReady, showInProgress, showRecordInput, waitTime, progressTime] as a second argument to the useEffect Hook.",["190"],"'axios' is defined but never used.","'EventEmitter' is defined but never used.","'Spinner' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'setIsLoggedIn' is assigned a value but never used.","'doRecordsExist' is assigned a value but never used.","'setDoRecordsExist' is assigned a value but never used.","'react' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},"Add dependencies array: [allowCountdown, showModal, seconds, hasPlayedAlarm, stopAlarm, alarmAudio]",{"range":"195","text":"196"},"Add dependencies array: [showPushUpCountdown, showReady, showInProgress, showRecordInput, waitTime, progressTime]",{"range":"197","text":"198"},[3174,3174],", [allowCountdown, showModal, seconds, hasPlayedAlarm, stopAlarm, alarmAudio]",[5300,5300],", [showPushUpCountdown, showReady, showInProgress, showRecordInput, waitTime, progressTime]"]