[{"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\index.tsx":"1","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\reportWebVitals.ts":"2","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\App.tsx":"3","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\MainComp.tsx":"4","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\HeaderComp.tsx":"5","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\TimerModal.tsx":"6","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\NotificationComp.tsx":"7","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\views\\LoginPage.tsx":"8","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\views\\NoLoginPage.tsx":"9","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\LoginComp.tsx":"10","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\views\\ViewRecordsPage.tsx":"11","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\ThemeToggleButton.tsx":"12","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\RegisterComp.tsx":"13","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\util\\axiosConfig.ts":"14","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\views\\LoggedPage.tsx":"15","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\reducers\\userReducer.ts":"16","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\reducers\\notifReducer.ts":"17","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\actions\\userActions.ts":"18","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\actions\\notifActions.ts":"19","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\util\\sessionStorage.ts":"20"},{"size":1512,"mtime":1611118867225,"results":"21","hashOfConfig":"22"},{"size":425,"mtime":499162500000,"results":"23","hashOfConfig":"22"},{"size":1397,"mtime":1611021767085,"results":"24","hashOfConfig":"22"},{"size":5226,"mtime":1611118582348,"results":"25","hashOfConfig":"22"},{"size":2070,"mtime":1608588420927,"results":"26","hashOfConfig":"22"},{"size":8043,"mtime":1608589606535,"results":"27","hashOfConfig":"22"},{"size":929,"mtime":1611021649134,"results":"28","hashOfConfig":"22"},{"size":1861,"mtime":1611117799373,"results":"29","hashOfConfig":"22"},{"size":249,"mtime":1608148191028,"results":"30","hashOfConfig":"22"},{"size":5384,"mtime":1611118040433,"results":"31","hashOfConfig":"22"},{"size":3017,"mtime":1608329873848,"results":"32","hashOfConfig":"22"},{"size":463,"mtime":1608171649276,"results":"33","hashOfConfig":"22"},{"size":6730,"mtime":1611118623414,"results":"34","hashOfConfig":"22"},{"size":129,"mtime":1610471327653,"results":"35","hashOfConfig":"22"},{"size":2577,"mtime":1611098795808,"results":"36","hashOfConfig":"22"},{"size":488,"mtime":1611020828930,"results":"37","hashOfConfig":"22"},{"size":451,"mtime":1611021156701,"results":"38","hashOfConfig":"22"},{"size":138,"mtime":1611019188668,"results":"39","hashOfConfig":"22"},{"size":144,"mtime":1611019879961,"results":"40","hashOfConfig":"22"},{"size":584,"mtime":1611118791227,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11uft0a",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\index.tsx",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\reportWebVitals.ts",[],["87","88"],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\App.tsx",["89","90"],"import React, { useState } from 'react';\nimport { LoginComp } from './components/LoginComp';\nimport { MainComp } from './components/MainComp';\nimport { HeaderComp } from './components/HeaderComp';\nimport \"../src/scss/page-style.scss\";\nimport NotificationComp from './components/NotificationComp';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { LoginPage } from './views/LoginPage';\nimport { NoLoginPage } from './views/NoLoginPage';\nimport { ViewRecordsPage } from './views/ViewRecordsPage';\nimport LoggedPage from './views/LoggedPage';\n\nfunction App() {\n\n  const [showNotification, setShowNotification] = useState(true);\n\n  return (\n    <>\n      <div className=\"bg\">   \n          <BrowserRouter>\n          {/* Header component above all other pages */}\n          <HeaderComp />\n            <Switch>\n              <Route exact path=\"/\" component={LoginPage} />\n              <Route path=\"/LoggedIn\" component={LoggedPage} />\n              <Route path=\"/noLogin\" component={NoLoginPage} />\n              <Route path=\"/myData\" component={ViewRecordsPage} />\n            </Switch>\n          </BrowserRouter>\n        {/* Notification component is always below every other page */}\n        {showNotification ? <NotificationComp text={\"temp text\"}\n        toggleFunction={()=>setShowNotification(!showNotification)}/> : <></>}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\MainComp.tsx",["91","92","93","94","95","96","97"],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\HeaderComp.tsx",["98","99"],"import React, { useState } from \"react\";\r\nimport { Redirect } from \"react-router\";\r\nimport \"../scss/header.scss\";\r\nimport { ThemeToggleButton } from \"./ThemeToggleButton\";\r\nimport arrow from \"../assets/arrow.svg\";\r\n\r\ninterface IProps {\r\n\r\n}\r\n\r\n/**\r\n * Contains the logout button, site logo, and theme-toggle button.\r\n * \r\n * @param props N/A\r\n */\r\nexport const HeaderComp: React.FC<IProps> = (props:IProps) => {\r\n\r\n    const [redirectToLogin, setRedirect] = useState(false);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n    /** logs the user out */\r\n    const logout = () => {\r\n\r\n        setRedirect(true);\r\n        setTimeout(()=>setRedirect(false),10);\r\n    }\r\n\r\n    const goBack = () => {\r\n        setRedirect(true);\r\n        setTimeout(()=>setRedirect(false),10);\r\n    }\r\n\r\n    return(\r\n        <div className=\"rounded-div header\">\r\n        <div className=\"container\">\r\n            <div className=\"row justify-content-center\">\r\n            \r\n            {isLoggedIn ?\r\n                <div className=\"col-2\">\r\n                    {/* only render this button if the user is logged in */}\r\n                    <button className=\"logout-btn\"\r\n                    onClick={logout}>Logout</button>\r\n                </div> \r\n            :\r\n                <div className=\"col-2\">\r\n                    <></>\r\n                </div> \r\n            }\r\n                \r\n\r\n                <div className=\"col-8 text-center\" >\r\n                    <h1 className=\"app-name\">PUSH UP APP</h1>\r\n                    <img className=\"logo\" src={arrow} alt=\"logo\" />\r\n                </div>\r\n\r\n                <ThemeToggleButton />\r\n\r\n            </div>\r\n            {isLoggedIn ? \r\n                <div className=\"container\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <p className=\"logged-name\">Logged in as: {}</p>\r\n                    </div>\r\n                </div>\r\n            :\r\n            <></>\r\n            }\r\n\r\n            {redirectToLogin ? <Redirect to=\"/\"/> : <></>}\r\n        </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\TimerModal.tsx",["100","101","102","103","104","105","106","107","108"],"import { Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\r\nimport React, { SyntheticEvent, useEffect, useState } from \"react\";\r\nimport \"../scss/page-style.scss\";\r\nimport { wait } from \"@testing-library/react\";\r\n\r\ninterface IProps{\r\n    show: boolean,\r\n    pushUpTime: number,\r\n    removeModalFunction: any,\r\n    stopAlarmFunction: any,\r\n    resettingTimeFunction: any,\r\n    allowCountdownFunction: any,\r\n    totalMinutes: number,\r\n}\r\n\r\nexport const TimerModal: React.FC<IProps> = (props:IProps) => {\r\n\r\n    const [waitTime,setWaitTime] = useState(-1);\r\n    const [progressTime,setProgressTime] = useState(0);\r\n    const [showPushUpCountdown, setShowPushCountdown] = useState(false);\r\n    const [showInProgress, setInProgress] = useState(false);\r\n    const [showRecordInput, setRecordInput] = useState(false);\r\n\r\n    let showReady = false;\r\n\r\n    //Bunch of if statements which format the minutes given by the user \r\n    // into a proper hours:minutes:seconds format\r\n    let formattedTime: string = \"\";\r\n    let minutes: number = 0;\r\n    let hours: number = 0;\r\n    if (Math.trunc(Math.trunc(props.pushUpTime/60)/60) > 0 && props.pushUpTime%60 !== 0)\r\n    {\r\n        hours = Math.trunc(Math.trunc(props.pushUpTime/60)/60);\r\n        minutes = Math.trunc(props.pushUpTime/60)%60;\r\n        formattedTime = hours + \":\" + (minutes < 10 ? \"0\" : \"\") + minutes + \":\" + \r\n        (props.pushUpTime%60 < 10 ? \"0\" : \"\") + props.pushUpTime%60;\r\n        showReady = false;\r\n    }\r\n    else if (Math.trunc(props.pushUpTime/60) > 0 && props.pushUpTime%60 !== 0)\r\n    {\r\n        minutes = Math.trunc(props.pushUpTime/60);\r\n        formattedTime = (minutes < 10 ? \"0\" : \"\") + minutes + \":\" + \r\n        (props.pushUpTime%60 < 10 ? \"0\" : \"\") +props.pushUpTime%60;\r\n        showReady = false;\r\n    }\r\n    else if (Math.trunc(props.pushUpTime/60) > 0 && props.pushUpTime%60 === 0)\r\n    {\r\n        minutes = Math.trunc(props.pushUpTime/60);\r\n        formattedTime = minutes + \":\" + \"00\";\r\n        showReady = false;\r\n    }\r\n    else if (Math.trunc(props.pushUpTime/60) === 0 && props.pushUpTime >= 0)\r\n    {\r\n        formattedTime = `${props.pushUpTime}`;\r\n        showReady = false;\r\n    }\r\n    else if (props.pushUpTime < 0)\r\n    {\r\n        formattedTime = \"0\";\r\n        showReady = true;\r\n    }\r\n\r\n    /** initializes the 5 second wait timer and stops playing the alarm */\r\n    const beginPushUp = () => {\r\n        setWaitTime(5);\r\n        setProgressTime(0);\r\n        props.stopAlarmFunction();\r\n        setShowPushCountdown(true);   \r\n    }\r\n\r\n    /** allows the user to input how many pushups they did */\r\n    const doneWithSet = (event:SyntheticEvent<HTMLFormElement>) => {\r\n        //submit the data somehow\r\n        const numberOfPushUps = event.currentTarget[\"input\"].value;\r\n\r\n        if(sessionStorage.getItem(\"tempSets\") == null)\r\n        {\r\n            sessionStorage.setItem(\"tempSets\",\"1\");\r\n        }\r\n        else\r\n        {\r\n            const currentSetString:any = sessionStorage.getItem(\"tempSets\");\r\n            const currentSetCount:number = parseInt(currentSetString);\r\n\r\n            sessionStorage.setItem(\"tempSets\", `${currentSetCount+1}`);\r\n        }\r\n        \r\n        const currentDate = new Date();\r\n        const currentDateString:string = `${currentDate.getMonth()+1} ${currentDate.getDay()}, \r\n        ${currentDate.getFullYear()} ${currentDate.getHours()%12}:`+\r\n        `${(currentDate.getMinutes() < 10 ? \"0\" : \"\") + currentDate.getMinutes()}`;\r\n\r\n        sessionStorage.setItem(\"tempData\", JSON.stringify({\r\n            date: currentDateString, \r\n            lastSetInterval: props.totalMinutes/60,\r\n            lastPushUpTime: progressTime,\r\n            lastPushUpCount: numberOfPushUps,\r\n        }));\r\n\r\n        //sessionStorage.setItem(\"\",{date: })\r\n        //trigger a reset of the push-up timer\r\n        console.log(props.totalMinutes);\r\n        props.resettingTimeFunction(props.totalMinutes);\r\n        props.allowCountdownFunction(true);\r\n        setInProgress(false);\r\n        setRecordInput(false);\r\n        setShowPushCountdown(false);\r\n    }\r\n\r\n    /** resets the components data before removing the modal */\r\n    const toggleReset = () => {\r\n        showReady = false;\r\n        setWaitTime(5);\r\n        setProgressTime(0);\r\n        setShowPushCountdown(false);\r\n        setInProgress(false);\r\n        setRecordInput(false);\r\n        props.removeModalFunction();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        console.log(\"show push up countdown: \" + showPushUpCountdown);\r\n        console.log(\"show ready button: \" + showReady);\r\n        console.log(\"show in progress: \" + showInProgress);\r\n        console.log(\"show record input: \" + showRecordInput);\r\n        \r\n        if(showPushUpCountdown == true && waitTime > 0 && showInProgress == false)\r\n        {\r\n            setTimeout(()=>setWaitTime(waitTime - 1), 1000);\r\n        }\r\n        else if (waitTime == 0 && showInProgress == false)\r\n        {\r\n            //setShowPushCount(false);\r\n            setWaitTime(-1);  \r\n\r\n            //start regular time\r\n            setInProgress(true);\r\n            setShowPushCountdown(true);\r\n\r\n        }\r\n        else if (showInProgress == true && showRecordInput == false)\r\n        {\r\n            setTimeout(()=>setProgressTime(progressTime +1), 1000);\r\n        }\r\n    })\r\n\r\n    return(\r\n        \r\n        <Modal isOpen={props.show} toggle={toggleReset} modalClassName=\"timer-modal-bg\" contentClassName=\"timer-modal-content\">\r\n            <ModalHeader className=\"timer-modal-head\">\r\n                {showPushUpCountdown ? \r\n                \r\n                    showInProgress ? \r\n                    <h2>Current Push-up time:</h2>\r\n                    :\r\n                    <h2>Get on the floor!!</h2> \r\n                :\r\n                <h2>Time left before next PUSH UP:</h2> }   \r\n            </ModalHeader>\r\n            <ModalBody >\r\n                {showPushUpCountdown ? \r\n                \r\n                    showInProgress ?\r\n                    <p className=\"timer-prog\" >{ progressTime }</p> \r\n                    :\r\n                    <p className=\"timer-wait\" key={Math.random()}>{ waitTime }</p> \r\n                :\r\n                <p className=\"timer\" key={Math.random()}>{ formattedTime }</p> }\r\n            </ModalBody>\r\n            <ModalFooter className=\"timer-modal-foot\">\r\n                {showPushUpCountdown ? \r\n                    \r\n                    showInProgress ? \r\n\r\n                        showRecordInput ?\r\n\r\n                            <form onSubmit={doneWithSet}>\r\n                                <div><h4>How many push-ups?</h4></div>\r\n                                <div><input className=\"push-input\" name=\"input\" type=\"number\" placeholder=\"?\" min=\"1\" max=\"9999\"/></div>\r\n                                <div><input className=\"start-btn\" type=\"submit\" value=\"Submit and reset timer\"/></div>\r\n                            </form>\r\n                            :\r\n                            <>\r\n                                <div><button className=\"done-btn\" onClick={()=>\r\n                                    {setRecordInput(!showRecordInput)}}>I'm Donezo</button></div>\r\n                                <div><h4 className=\"click-any-sm\" >Click anywhere else to stop the timer</h4></div>\r\n                            </>\r\n\r\n                    :\r\n                    <></>\r\n                :\r\n                \r\n                    showReady ?\r\n                    \r\n                        showInProgress ? \r\n\r\n                        <></>\r\n                        :\r\n                        <>\r\n                            <div><button className=\"timer-btn\" onClick={beginPushUp}>READY FOR PUSH-UPS??</button></div>\r\n                            <div><h4 className=\"click-any-sm\" >Click anywhere else to stop the timer</h4></div>\r\n                        </>\r\n                    :\r\n                    <h4 className=\"click-any-lg\" >Click anywhere to stop the timer</h4>\r\n                }\r\n                    \r\n            </ModalFooter>\r\n        </Modal>\r\n    )\r\n}","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\NotificationComp.tsx",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\views\\LoginPage.tsx",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\views\\NoLoginPage.tsx",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\LoginComp.tsx",["109","110","111"],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\views\\ViewRecordsPage.tsx",["112","113","114"],"import React, { useState } from \"react\";\r\nimport { Redirect } from \"react-router\";\r\nimport \"../scss/view-data.scss\";\r\ninterface IProps {\r\n\r\n}\r\n\r\nlet tempData: any;\r\nexport const ViewRecordsPage: React.FC<IProps> = (props:IProps) => {\r\n\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [doRecordsExist, setDoRecordsExist] =useState(false);\r\n    const [redirectToTimer, setRedirect] = useState(false);\r\n\r\n    if(sessionStorage.getItem(\"tempData\") != null)\r\n    {\r\n        tempData = JSON.parse(sessionStorage.tempData);\r\n    }\r\n\r\n    const backToTimer = () => {\r\n        setRedirect(true);\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            {isLoggedIn ?\r\n            <></>\r\n            :\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"temp-comp\">\r\n                    {sessionStorage.getItem(\"tempData\") != null ?\r\n                    <>\r\n                        <h3>Latest push-up data:</h3>\r\n                        <hr></hr>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-6\" style={{textAlign:\"right\"}}>Date:</div>\r\n                            <div className=\"col-6\" style={{textAlign:\"left\"}}>{tempData.date}</div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-6\" style={{textAlign:\"right\"}}>Sets:</div>\r\n                            <div className=\"col-6\" style={{textAlign:\"left\"}}>{sessionStorage.tempSets} set(s)</div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-6\" style={{textAlign:\"right\"}}>Last Set Interval:</div>\r\n                            <div className=\"col-6\" style={{textAlign:\"left\"}}>{tempData.lastSetInterval} minute(s)</div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-6\" style={{textAlign:\"right\"}}>Last Push-Up Time:</div>\r\n                            <div className=\"col-6\" style={{textAlign:\"left\"}}>{tempData.lastPushUpTime} second(s)</div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-6\" style={{textAlign:\"right\"}}>Last Push-Up Count:</div>\r\n                            <div className=\"col-6\" style={{textAlign:\"left\"}}>{tempData.lastPushUpCount} push-up(s)</div>\r\n                        </div>\r\n                    </>\r\n                    :\r\n                    <p style={{textAlign: \"center\"}}>Sorry no records found.</p>\r\n                    }\r\n\r\n                    <div className=\"row justify-content-center\">\r\n                        <button className=\"back-btn\"\r\n                        onClick={backToTimer}>Back to timer</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            }\r\n            {redirectToTimer ? <Redirect to=\"/noLogin\" /> : <></>}\r\n        </div>\r\n    )\r\n}","C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\ThemeToggleButton.tsx",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\components\\RegisterComp.tsx",["115","116","117","118","119","120"],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\util\\axiosConfig.ts",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\views\\LoggedPage.tsx",["121","122"],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\reducers\\userReducer.ts",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\reducers\\notifReducer.ts",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\actions\\userActions.ts",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\actions\\notifActions.ts",[],"C:\\Users\\bgdyl\\Desktop\\Personal Projects\\PushUpReactApp\\push-up-web\\src\\util\\sessionStorage.ts",[],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":2,"column":10,"nodeType":"129","messageId":"130","endLine":2,"endColumn":19},{"ruleId":"127","severity":1,"message":"131","line":3,"column":10,"nodeType":"129","messageId":"130","endLine":3,"endColumn":18},{"ruleId":"132","severity":1,"message":"133","line":61,"column":5,"nodeType":"129","endLine":61,"endColumn":14,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":63,"column":27,"nodeType":"137","messageId":"138","endLine":63,"endColumn":29},{"ruleId":"135","severity":1,"message":"136","line":63,"column":63,"nodeType":"137","messageId":"138","endLine":63,"endColumn":65},{"ruleId":"135","severity":1,"message":"136","line":74,"column":27,"nodeType":"137","messageId":"138","endLine":74,"endColumn":29},{"ruleId":"135","severity":1,"message":"136","line":96,"column":21,"nodeType":"137","messageId":"138","endLine":96,"endColumn":23},{"ruleId":"135","severity":1,"message":"136","line":101,"column":26,"nodeType":"137","messageId":"138","endLine":101,"endColumn":28},{"ruleId":"135","severity":1,"message":"136","line":106,"column":26,"nodeType":"137","messageId":"138","endLine":106,"endColumn":28},{"ruleId":"127","severity":1,"message":"139","line":19,"column":24,"nodeType":"129","messageId":"130","endLine":19,"endColumn":37},{"ruleId":"127","severity":1,"message":"140","line":28,"column":11,"nodeType":"129","messageId":"130","endLine":28,"endColumn":17},{"ruleId":"127","severity":1,"message":"141","line":4,"column":10,"nodeType":"129","messageId":"130","endLine":4,"endColumn":14},{"ruleId":"142","severity":1,"message":"143","line":49,"column":39,"nodeType":"137","messageId":"144","endLine":49,"endColumn":40},{"ruleId":"132","severity":1,"message":"145","line":121,"column":5,"nodeType":"129","endLine":121,"endColumn":14,"suggestions":"146"},{"ruleId":"135","severity":1,"message":"136","line":127,"column":32,"nodeType":"137","messageId":"138","endLine":127,"endColumn":34},{"ruleId":"135","severity":1,"message":"136","line":127,"column":74,"nodeType":"137","messageId":"138","endLine":127,"endColumn":76},{"ruleId":"135","severity":1,"message":"136","line":131,"column":27,"nodeType":"137","messageId":"138","endLine":131,"endColumn":29},{"ruleId":"135","severity":1,"message":"136","line":131,"column":50,"nodeType":"137","messageId":"138","endLine":131,"endColumn":52},{"ruleId":"135","severity":1,"message":"136","line":141,"column":33,"nodeType":"137","messageId":"138","endLine":141,"endColumn":35},{"ruleId":"135","severity":1,"message":"136","line":141,"column":60,"nodeType":"137","messageId":"138","endLine":141,"endColumn":62},{"ruleId":"127","severity":1,"message":"147","line":1,"column":8,"nodeType":"129","messageId":"130","endLine":1,"endColumn":13},{"ruleId":"127","severity":1,"message":"148","line":2,"column":10,"nodeType":"129","messageId":"130","endLine":2,"endColumn":22},{"ruleId":"149","severity":1,"message":"150","line":138,"column":17,"nodeType":"151","endLine":138,"endColumn":65},{"ruleId":"127","severity":1,"message":"139","line":11,"column":24,"nodeType":"129","messageId":"130","endLine":11,"endColumn":37},{"ruleId":"127","severity":1,"message":"152","line":12,"column":12,"nodeType":"129","messageId":"130","endLine":12,"endColumn":26},{"ruleId":"127","severity":1,"message":"153","line":12,"column":28,"nodeType":"129","messageId":"130","endLine":12,"endColumn":45},{"ruleId":"127","severity":1,"message":"148","line":1,"column":10,"nodeType":"129","messageId":"130","endLine":1,"endColumn":22},{"ruleId":"135","severity":1,"message":"154","line":29,"column":17,"nodeType":"137","messageId":"138","endLine":29,"endColumn":19},{"ruleId":"135","severity":1,"message":"154","line":29,"column":32,"nodeType":"137","messageId":"138","endLine":29,"endColumn":34},{"ruleId":"135","severity":1,"message":"154","line":29,"column":47,"nodeType":"137","messageId":"138","endLine":29,"endColumn":49},{"ruleId":"135","severity":1,"message":"154","line":30,"column":22,"nodeType":"137","messageId":"138","endLine":30,"endColumn":24},{"ruleId":"135","severity":1,"message":"154","line":30,"column":40,"nodeType":"137","messageId":"138","endLine":30,"endColumn":42},{"ruleId":"135","severity":1,"message":"136","line":20,"column":21,"nodeType":"137","messageId":"138","endLine":20,"endColumn":23},{"ruleId":"135","severity":1,"message":"136","line":25,"column":24,"nodeType":"137","messageId":"138","endLine":25,"endColumn":26},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"@typescript-eslint/no-unused-vars","'LoginComp' is defined but never used.","Identifier","unusedVar","'MainComp' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setSeconds'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [allowCountdown, showModal, seconds, hasPlayedAlarm, stopAlarm, alarmAudio] as a second argument to the useEffect Hook.",["157"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setIsLoggedIn' is assigned a value but never used.","'goBack' is assigned a value but never used.","'wait' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect contains a call to 'setWaitTime'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [showPushUpCountdown, showReady, showInProgress, showRecordInput, waitTime, progressTime] as a second argument to the useEffect Hook.",["158"],"'axios' is defined but never used.","'EventEmitter' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'doRecordsExist' is assigned a value but never used.","'setDoRecordsExist' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},"Add dependencies array: [allowCountdown, showModal, seconds, hasPlayedAlarm, stopAlarm, alarmAudio]",{"range":"163","text":"164"},"Add dependencies array: [showPushUpCountdown, showReady, showInProgress, showRecordInput, waitTime, progressTime]",{"range":"165","text":"166"},[2737,2737],", [allowCountdown, showModal, seconds, hasPlayedAlarm, stopAlarm, alarmAudio]",[5300,5300],", [showPushUpCountdown, showReady, showInProgress, showRecordInput, waitTime, progressTime]"]